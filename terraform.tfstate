{
  "version": 4,
  "terraform_version": "0.12.28",
  "serial": 3,
  "lineage": "85178c98-7ad9-2dff-c000-eb71d1d84d6c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "fastly_service_v1",
      "name": "fastly_waf_demo",
      "provider": "provider.fastly",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": [],
            "activate": true,
            "active_version": 2,
            "backend": [
              {
                "address": "chenrui.dev",
                "auto_loadbalance": false,
                "between_bytes_timeout": 10000,
                "connect_timeout": 1000,
                "error_threshold": 0,
                "first_byte_timeout": 15000,
                "healthcheck": "",
                "max_conn": 200,
                "max_tls_version": "",
                "min_tls_version": "",
                "name": "chenrui.dev",
                "override_host": "",
                "port": 443,
                "request_condition": "",
                "shield": "",
                "ssl_ca_cert": "",
                "ssl_cert_hostname": "chenrui.dev",
                "ssl_check_cert": true,
                "ssl_ciphers": "",
                "ssl_client_cert": "",
                "ssl_client_key": "",
                "ssl_hostname": "",
                "ssl_sni_hostname": "chenrui.dev",
                "use_ssl": true,
                "weight": 100
              }
            ],
            "bigquerylogging": [],
            "blobstoragelogging": [],
            "cache_setting": [],
            "cloned_version": null,
            "comment": "Managed by Terraform",
            "condition": [],
            "default_host": "",
            "default_ttl": 3600,
            "dictionary": [],
            "director": [],
            "domain": [
              {
                "comment": "test domain",
                "name": "chenrui.dev"
              }
            ],
            "dynamicsnippet": [],
            "force_destroy": null,
            "gcslogging": [],
            "gzip": [],
            "header": [],
            "healthcheck": [],
            "httpslogging": [],
            "id": "5VAbPN7yrpQ07kfUxAwlOU",
            "logentries": [],
            "logging_cloudfiles": [],
            "logging_datadog": [],
            "logging_digitalocean": [],
            "logging_elasticsearch": [],
            "logging_ftp": [],
            "logging_googlepubsub": [],
            "logging_heroku": [],
            "logging_honeycomb": [],
            "logging_kafka": [],
            "logging_loggly": [],
            "logging_logshuttle": [],
            "logging_newrelic": [],
            "logging_openstack": [],
            "logging_scalyr": [],
            "logging_sftp": [],
            "name": "fastly_waf_test",
            "papertrail": [],
            "request_setting": [],
            "response_object": [],
            "s3logging": [],
            "snippet": [],
            "splunk": [],
            "sumologic": [],
            "syslog": [],
            "vcl": [
              {
                "content": "# Finish up the VCL.\nsub vcl_recv {\n\n  # Normally, you should consider requests other than GET and HEAD to be uncacheable\n  # (to this we add the special FASTLYPURGE method)\n  if (req.request != \"HEAD\" \u0026\u0026 req.request != \"GET\" \u0026\u0026 req.request != \"FASTLYPURGE\") {\n    return (pass);\n  }\n\n  return (lookup);\n}\n\nsub vcl_fetch {\n  # If the response is setting a cookie, make sure it is not cached\n  if (beresp.http.Set-Cookie) {\n    set req.http.Fastly-Cachetype = \"SETCOOKIE\";\n    return (pass);\n  }\n\n  # By default we set a TTL based on the `Cache-Control` header but we don't parse additional directives\n  # like `private`.  Private in particular should be respected at the edge:\n  if (beresp.http.Cache-Control ~ \"private\") {\n    set req.http.Fastly-Cachetype = \"PRIVATE\";\n    return (pass);\n  }\n\n  # If no TTL has been provided in the response headers, set a default\n  if (!beresp.http.Expires \u0026\u0026 !beresp.http.Surrogate-Control ~ \"max-age\" \u0026\u0026 !beresp.http.Cache-Control ~ \"(s-maxage|max-age)\") {\n    set beresp.ttl = 3600s;\n  }\n\n  return (deliver);\n}\n\nsub vcl_hit {\n  if (!obj.cacheable) {\n    return (pass);\n  }\n\n  return (deliver);\n}\n\nsub vcl_miss {\n  return (fetch);\n}\n\nsub vcl_deliver {\n  return (deliver);\n}\n",
                "main": false,
                "name": "fastly-boilerplate-end.vcl"
              },
              {
                "content": "# The Fastly VCL boilerplate.\ninclude \"fastly-boilerplate-begin.vcl\";\n\n# Finally include the last bit of VCL, this _must_ be last!\ninclude \"fastly-boilerplate-end.vcl\";\n",
                "main": true,
                "name": "main.vcl"
              },
              {
                "content": "sub vcl_recv {\n#FASTLY recv\n\n  set req.http.Orig-URL = req.url;\n\n  // force ssl\n  if (!req.http.Fastly-SSL) {\n    // https://github.com/Financial-Times/polyfill-service/blob/master/fastly/vcl/redirects.vcl#L16-L19\n    // 801 is a special error code that Fastly uses to Force HTTPS on the request\n    error 801 \"Redirect to HTTPS\";\n  }\n}\n\nsub vcl_hash {\n#FASTLY hash\n  // adopted from boilerplate, but different from the generated vcl\n  set req.hash += req.http.host;\n  set req.hash += req.url;\n  return(hash);\n}\n\nsub vcl_fetch {\n#FASTLY fetch\n\n  if ((beresp.status == 500 || beresp.status == 503) \u0026\u0026 req.restarts \u003c 1 \u0026\u0026 (req.request == \"GET\" || req.request == \"HEAD\")) {\n    restart;\n  }\n\n  if (req.restarts \u003e 0) {\n    set beresp.http.Fastly-Restarts = req.restarts;\n  }\n}\n\nsub vcl_hit {\n#FASTLY hit\n\n  if (!obj.cacheable) {\n    return(pass);\n  }\n}\n\nsub vcl_miss {\n#FASTLY miss\n}\n\nsub vcl_deliver {\n#FASTLY deliver\n}\n\nsub vcl_error {\n#FASTLY error\n}\n\nsub vcl_pass {\n#FASTLY pass\n}\n\nsub vcl_log {\n#FASTLY log\n}\n",
                "main": false,
                "name": "fastly-boilerplate-begin.vcl"
              }
            ],
            "version_comment": ""
          },
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
